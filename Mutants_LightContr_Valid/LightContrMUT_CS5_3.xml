<nta><declaration>const int Max = 10; // max level of light
const int tolerance = 5; // max timing tolerance
const int epsilon = 20; // timeout when grasp cannot be ignored
const int delta = 50;  // longest duration for registering touch
const int delay = 100; // dimmer increment/decrement delay

const int latency = 5; // adapter communication latency

const int Wait = 2000; // used by environment 
const int T_react = 1; // used by environment

// IUT internal:
chan touch, starthold, endhold;
int[0,1] on;
int iutLevel, OL;

// IUT interface to adapter:
chan setGrasp, setRelease; // inputs
chan setLevel; // outputs

// Observable
chan grasp, release, level;
int envLevel;
</declaration><template><name x="5" y="5">Interface</name><parameter>const int epsilon, const int delta, chan &amp;grasp, chan &amp;release</parameter><declaration>clock x;</declaration><location id="id0" x="160" y="80"><name x="150" y="50">idle</name><label kind="comments">Wait for inputs, do nothing, just delay.</label></location><location id="id1" x="160" y="144"><name x="176" y="128">ignoring</name><label kind="invariant" x="136" y="152">x&lt;=epsilon+
tolerance</label><label kind="comments">Do nothing until &lt;b&gt;epsilon&lt;/b&gt; time passes or "release" arrives.&lt;br&gt;
If "release" arrives then ignore it and go back to "idle".&lt;br&gt;
If &lt;b&gt;epsilon&lt;/b&gt; time passes by, then go to "alert".</label></location><location id="id2" x="160" y="232"><name x="176" y="216">alert</name><label kind="invariant" x="176" y="232">x&lt;=delta+
tolerance</label><label kind="comments">Now the process is alert and will react within &lt;b&gt;delta&lt;/b&gt; time.&lt;br&gt;
If "release" arrives within &lt;b&gt;delta&lt;/b&gt; time, then go to "touched".&lt;br&gt;
If &lt;b&gt;delta&lt;/b&gt; passes without interruption, then notify &lt;b&gt;Dimmer&lt;/b&gt; with "starthold" and go to "holding".</label></location><location id="id3" x="256" y="160"><name x="280" y="152">touched</name><label kind="invariant" x="264" y="168">x&lt;tolerance</label><label kind="comments">Within tolerable time, notify &lt;b&gt;Switch&lt;/b&gt; about detected "touch".</label></location><location id="id4" x="64" y="192"><name x="32" y="160">releasing</name><label kind="invariant" x="32" y="216">x&lt;tolerance</label><label kind="comments">Within tolerable time, notify &lt;b&gt;Dimmer&lt;/b&gt; about detected "endhold".</label></location><location id="id5" x="160" y="320"><name x="176" y="312">holding</name><label kind="comments">In this location we stay until "release" arrives (potentially &lt;b&gt;indefinetely&lt;/b&gt;).
When "release" arrives, go to "releasing".</label></location><init ref="id0" /><transition><source ref="id0" /><target ref="id1" /><label kind="synchronisation" x="168" y="88">grasp?</label><label kind="assignment" x="168" y="104">x=0</label></transition><transition><source ref="id1" /><target ref="id0" /><label kind="synchronisation" x="88" y="104">release?</label><nail x="128" y="144" /><nail x="128" y="96" /></transition><transition><source ref="id2" /><target ref="id3" /><label kind="synchronisation" x="256" y="200">release?</label><label kind="assignment" x="256" y="216">x=0</label><nail x="256" y="232" /></transition><transition><source ref="id3" /><target ref="id0" /><label kind="synchronisation" x="208" y="64">touch!</label><nail x="256" y="80" /></transition><transition><source ref="id3" /><target ref="id2" /><label kind="guard" x="136" y="192">x&gt;=epsilon</label></transition><transition><source ref="id2" /><target ref="id5" /><label kind="guard" x="136" y="264">x&gt;=delta</label><label kind="synchronisation" x="136" y="280">starthold!</label></transition><transition><source ref="id5" /><target ref="id4" /><label kind="synchronisation" x="32" y="248">release?</label><label kind="assignment" x="32" y="264">x=0</label><nail x="64" y="320" /></transition><transition><source ref="id4" /><target ref="id0" /><label kind="synchronisation" x="64" y="64">endhold!</label><nail x="64" y="80" /></transition></template><template><name x="5" y="5">Dimmer</name><parameter>const int delay, chan &amp;setLevel, int&amp; L</parameter><declaration>/**
 * The Dimmer adjust the light level incrementally.
 * It alternates between increments and decrements allowing
 * user to adjust the light to any level.
 * The Dimmer has slightly asymetric behavior on purpose.
 */
clock x;</declaration><location id="id6" x="64" y="144"><name x="54" y="114">Up</name><label kind="invariant" x="32" y="160">x&lt;=delay+
tolerance</label><label kind="comments">Wait for a short &lt;b&gt;delay&lt;/b&gt; and increment the light level &lt;b&gt;L&lt;/b&gt; by executing the loop with "setLevel".
If the light level reaches &lt;b&gt;Max&lt;/b&gt; then switch to "Dn" and start decrementing there.
If "endhold" is received, then stop incrementing and go to "PassiveDn".</label></location><location id="id7" x="320" y="144"><name x="310" y="114">Dn</name><label kind="invariant" x="296" y="168">x&lt;=delay+
tolerance</label><label kind="comments">Similarly to "Up" location, wait for &lt;b&gt;delay&lt;/b&gt; to ellapse and decrement the level &lt;b&gt;L&lt;/b&gt; by executing "setLevel" loop.
If the level drops to zero, switch to "Up" to start incrementing.
If "endhold" is received, then stop decrementing and move to "PassiveUp".</label></location><location id="id8" x="192" y="272"><name x="208" y="264">PassiveDn</name><label kind="comments">Wait for "starthold" similarly to "PassiveUp", but move to "Dn" instead to decrement the level.</label></location><location id="id9" x="192" y="0"><name x="208" y="-8">PassiveUp</name><label kind="comments">Wait for "starthold". Restore the &lt;b&gt;OL&lt;/b&gt; level in &lt;b&gt;L&lt;/b&gt; when "starthold" is reveived and move to "Up" location.</label></location><location id="id10" x="128" y="72"><label kind="comments">Immediately display level via "setLevel" message and move to "Up".</label><committed /></location><init ref="id9" /><transition><source ref="id6" /><target ref="id8" /><label kind="synchronisation" x="80" y="224">endhold?</label></transition><transition><source ref="id8" /><target ref="id7" /><label kind="synchronisation" x="256" y="208">starthold?</label><label kind="assignment" x="240" y="224">OL=L,on=1,
x=0</label></transition><transition><source ref="id6" /><target ref="id6" /><label kind="guard" x="-40" y="96">L&lt;Max and
x&gt;=delay</label><label kind="synchronisation" x="-40" y="128">setLevel!</label><label kind="assignment" x="-40" y="144">L=L+1,
x=0</label><nail x="8" y="176" /><nail x="8" y="120" /></transition><transition><source ref="id7" /><target ref="id7" /><label kind="guard" x="360" y="88">L&gt;0 and
x&gt;=delay</label><label kind="synchronisation" x="360" y="120">setLevel!</label><label kind="assignment" x="360" y="136">L=L-1,
x=0</label><nail x="368" y="168" /><nail x="368" y="120" /></transition><transition><source ref="id9" /><target ref="id10" /><label kind="synchronisation" x="96" y="-16">starthold?</label><label kind="assignment" x="120" y="0">L=OL,
x=0,
on=1</label></transition><transition><source ref="id7" /><target ref="id9" /><label kind="synchronisation" x="232" y="56">endhold?</label></transition><transition><source ref="id6" /><target ref="id7" /><label kind="guard" x="152" y="104">L==Max and
x&gt;=delay</label><nail x="152" y="120" /><nail x="232" y="120" /></transition><transition><source ref="id7" /><target ref="id6" /><label kind="guard" x="160" y="152">L==0 and 
x&gt;=delay</label><nail x="240" y="168" /><nail x="152" y="168" /></transition><transition><source ref="id10" /><target ref="id6" /><label kind="synchronisation" x="40" y="80">setLevel!</label></transition></template><template><name x="5" y="5">Switch</name><parameter>chan &amp;setLevel, int&amp; L</parameter><declaration>/**
 * The Switch is turning on or off the light upon touch.
 * It uses the stored old light level when turning on.
 */</declaration><location id="id11" x="192" y="98"><name x="182" y="68">idle</name><label kind="comments">Wait for "touch" events and depending on the state of &lt;b&gt;on&lt;/b&gt;, turn the light on by putting the old value of &lt;b&gt;OL&lt;/b&gt; into &lt;b&gt;L&lt;/b&gt;, or turn off by saving the current value &lt;b&gt;L&lt;/b&gt; into &lt;b&gt;OL&lt;/b&gt; and setting &lt;b&gt;L&lt;/b&gt; to zero.</label></location><location id="id12" x="64" y="96"><name x="32" y="64">goingOn</name><committed /></location><location id="id13" x="328" y="96"><name x="304" y="64">goingOff</name><committed /></location><init ref="id11" /><transition><source ref="id11" /><target ref="id12" /><label kind="guard" x="104" y="96">on==0</label><label kind="synchronisation" x="104" y="112">touch?</label><label kind="assignment" x="104" y="128">L=OL,
on=1</label><nail x="160" y="128" /><nail x="96" y="128" /></transition><transition><source ref="id11" /><target ref="id13" /><label kind="guard" x="232" y="96">on==1</label><label kind="synchronisation" x="232" y="112">touch?</label><label kind="assignment" x="232" y="128">OL=L,
L=0,
on=0</label><nail x="224" y="128" /><nail x="288" y="128" /></transition><transition><source ref="id12" /><target ref="id11" /><label kind="synchronisation" x="96" y="48">setLevel!</label><nail x="96" y="64" /><nail x="160" y="64" /></transition><transition><source ref="id13" /><target ref="id11" /><label kind="synchronisation" x="224" y="48">setLevel!</label><nail x="288" y="64" /><nail x="224" y="64" /></transition></template><template><name x="5" y="5">Adapter</name><parameter>const int delay, chan &amp;inp, chan &amp;out</parameter><declaration>/**
 * The purpose of Adapter processes is to model how observable signals are 
 * delayed when travelling from IUT to Tron and back.
 * The template can be used to transfer either input or output signal,
 * but one instantiation can handle only one way transfer, hence it must
 * be instantiated for every observable input/output channel.
 */
clock x;</declaration><location id="id14" x="256" y="128"><name x="246" y="98">idle</name><label kind="comments">Wait for signal to be transmitted. 
When signal "inp" arrives, move to "signal" location.</label></location><location id="id15" x="256" y="224"><name x="280" y="208">signal</name><label kind="invariant" x="280" y="224">x&lt;=delay</label><label kind="comments">This location corresponds to situation when the signal has left one side (TRON or IUT) but has not reached another (IUT or TRON).
The signal may stay like that for at most &lt;b&gt;delay&lt;/b&gt; time, but it can arrive earlier.
When signal reaches the other end, it is (re)transmitted via "out" and automaton moves to "idle" location to be reused again for other events.&lt;br&gt;
Note that &lt;b&gt;delay&lt;/b&gt; is a parameter to this template, not the globally shared variable.</label></location><init ref="id14" /><transition><source ref="id14" /><target ref="id15" /><label kind="synchronisation" x="296" y="160">inp?</label><label kind="assignment" x="296" y="175">x=0</label><nail x="288" y="160" /><nail x="288" y="192" /></transition><transition><source ref="id15" /><target ref="id14" /><label kind="synchronisation" x="224" y="168">out!</label><nail x="224" y="192" /><nail x="224" y="160" /></transition></template><template><name x="5" y="5">IntAdapter</name><parameter>const int delay, chan &amp;inp, int&amp; inpData, chan &amp;out, int&amp; outData</parameter><declaration>/**
 * The IntAdapter has the same purpose as Adapter, but in addition it can also 
 * transfer (and delay) an integer data value.
 * The data must be ready in the inpData variable during "inp"
 */
clock x;
int data;</declaration><location id="id16" x="176" y="168"><committed /></location><location id="id17" x="256" y="128"><name x="246" y="98">idle</name></location><location id="id18" x="256" y="224"><name x="272" y="216">signal</name><label kind="invariant" x="224" y="240">x&lt;=delay</label></location><init ref="id17" /><transition><source ref="id16" /><target ref="id17" /><label kind="synchronisation" x="184" y="128">out!</label><nail x="176" y="128" /></transition><transition><source ref="id17" /><target ref="id18" /><label kind="synchronisation" x="264" y="144">inp?</label><label kind="assignment" x="264" y="160">x=0,
data=
inpData</label></transition><transition><source ref="id18" /><target ref="id16" /><label kind="assignment" x="184" y="184">outData=
data</label><nail x="176" y="224" /></transition></template><template><name x="5" y="5">GeneralEnv</name><parameter>chan &amp;changeLevel, int&amp; L</parameter><location id="id19" x="-64" y="-256"><name x="-40" y="-272">idle</name></location><location id="id20" x="-64" y="-96"><name x="-40" y="-96">busy</name></location><init ref="id19" /><transition><source ref="id20" /><target ref="id19" /><label kind="synchronisation" x="-32" y="-184">release!</label><nail x="0" y="-128" /><nail x="0" y="-224" /></transition><transition><source ref="id19" /><target ref="id20" /><label kind="synchronisation" x="-160" y="-184">grasp!</label><nail x="-128" y="-224" /><nail x="-128" y="-128" /></transition><transition><source ref="id19" /><target ref="id19" /><label kind="synchronisation" x="-104" y="-312">changeLevel?</label><nail x="-96" y="-288" /><nail x="-32" y="-288" /></transition><transition><source ref="id20" /><target ref="id20" /><label kind="synchronisation" x="-96" y="-64">changeLevel?</label><nail x="-96" y="-64" /><nail x="-32" y="-64" /></transition></template><template><name x="5" y="5">DumbUser</name><parameter>chan &amp;changeLevel, int&amp; L</parameter><declaration>clock z;</declaration><location id="id21" x="-64" y="-256"><name x="-40" y="-272">idle</name><label kind="invariant" x="-88" y="-248">z&lt;=Wait</label></location><location id="id22" x="-64" y="-96"><name x="-40" y="-96">busy</name><label kind="invariant" x="-96" y="-128">z&lt;=Wait</label></location><init ref="id21" /><transition><source ref="id22" /><target ref="id21" /><label kind="guard" x="-32" y="-200">z&gt;=T_react</label><label kind="synchronisation" x="-32" y="-184">release!</label><label kind="assignment" x="-32" y="-168">z=0</label><nail x="0" y="-128" /><nail x="0" y="-224" /></transition><transition><source ref="id21" /><target ref="id22" /><label kind="guard" x="-160" y="-200">z&gt;=T_react</label><label kind="synchronisation" x="-160" y="-184">grasp!</label><label kind="assignment" x="-160" y="-168">z=0</label><nail x="-128" y="-224" /><nail x="-128" y="-128" /></transition><transition><source ref="id21" /><target ref="id21" /><label kind="synchronisation" x="-104" y="-312">changeLevel?</label><nail x="-96" y="-288" /><nail x="-32" y="-288" /></transition><transition><source ref="id22" /><target ref="id22" /><label kind="synchronisation" x="-96" y="-64">changeLevel?</label><nail x="-96" y="-64" /><nail x="-32" y="-64" /></transition></template><template><name x="5" y="5">SampleUser</name><parameter>chan &amp;changeLevel, int&amp; newLevel</parameter><declaration>clock z;
int[0,Max] L;</declaration><location id="id23" x="-64" y="-256"><name x="-40" y="-272">idle</name><label kind="invariant" x="-104" y="-240">z&lt;=2*delay</label></location><location id="id24" x="-64" y="-96"><name x="-40" y="-96">busy</name><label kind="invariant" x="-104" y="-128">z&lt;=10*delay</label></location><init ref="id23" /><transition><source ref="id24" /><target ref="id23" /><label kind="guard" x="-56" y="-200">z&gt;=2*delay</label><label kind="synchronisation" x="-56" y="-184">release!</label><label kind="assignment" x="-56" y="-168">z=0</label><nail x="0" y="-128" /><nail x="0" y="-224" /></transition><transition><source ref="id23" /><target ref="id24" /><label kind="guard" x="-152" y="-200">z&gt;=delay</label><label kind="synchronisation" x="-152" y="-184">grasp!</label><label kind="assignment" x="-152" y="-168">z=0</label><nail x="-128" y="-224" /><nail x="-128" y="-128" /></transition><transition><source ref="id23" /><target ref="id23" /><label kind="synchronisation" x="-104" y="-320">changeLevel?</label><label kind="assignment" x="-104" y="-304">L=newLevel</label><nail x="-96" y="-288" /><nail x="-32" y="-288" /></transition><transition><source ref="id24" /><target ref="id24" /><label kind="synchronisation" x="-96" y="-64">changeLevel?</label><label kind="assignment" x="-96" y="-48">L=newLevel</label><nail x="-96" y="-64" /><nail x="-32" y="-64" /></transition><transition><source ref="id24" /><target ref="id23" /><label kind="guard" x="40" y="-200">L&gt;8 and z&lt;delta</label><label kind="synchronisation" x="40" y="-184">release!</label><label kind="assignment" x="40" y="-168">z=0</label><nail x="64" y="-128" /><nail x="64" y="-216" /></transition></template><template><name x="5" y="5">RealUser</name><parameter>chan &amp;changeLevel, int&amp; newLevel</parameter><declaration>clock z;
int[0,Max] L;</declaration><location id="id25" x="-64" y="-256"><name x="-104" y="-272">idle</name><label kind="invariant" x="-96" y="-240">z&lt;5*delay</label></location><location id="id26" x="-64" y="-96"><name x="-40" y="-96">busy</name><label kind="invariant" x="-96" y="-128">z&lt;10*delay+delta</label></location><location id="id27" x="98" y="-319"><name x="112" y="-328">off</name><label kind="invariant" x="80" y="-304">z&lt;delta</label></location><init ref="id25" /><transition><source ref="id26" /><target ref="id25" /><label kind="guard" x="-32" y="-200">z&gt;=3*delay+delta</label><label kind="synchronisation" x="-32" y="-184">release!</label><label kind="assignment" x="-32" y="-168">z=0</label><nail x="0" y="-128" /><nail x="0" y="-224" /></transition><transition><source ref="id25" /><target ref="id26" /><label kind="guard" x="-160" y="-208">L&lt;=7 and z&gt;=2*delay</label><label kind="synchronisation" x="-160" y="-176">grasp!</label><label kind="assignment" x="-160" y="-160">z=0</label><nail x="-128" y="-224" /><nail x="-128" y="-128" /></transition><transition><source ref="id25" /><target ref="id25" /><label kind="synchronisation" x="-120" y="-320">changeLevel?</label><label kind="assignment" x="-120" y="-304">L=newLevel</label><nail x="-96" y="-288" /><nail x="-32" y="-288" /></transition><transition><source ref="id26" /><target ref="id26" /><label kind="synchronisation" x="-96" y="-64">changeLevel?</label><label kind="assignment" x="-96" y="-48">L=newLevel</label><nail x="-96" y="-64" /><nail x="-32" y="-64" /></transition><transition><source ref="id25" /><target ref="id27" /><label kind="guard" x="-16" y="-336">L&gt;5 and z&gt;=3*delay</label><label kind="synchronisation" x="-16" y="-304">grasp!</label><label kind="assignment" x="-16" y="-288">z=0</label></transition><transition><source ref="id27" /><target ref="id25" /><label kind="guard" x="24" y="-272">z&gt;epsilon</label><label kind="synchronisation" x="24" y="-256">release!</label><label kind="assignment" x="24" y="-240">z=0</label><nail x="96" y="-256" /></transition><transition><source ref="id27" /><target ref="id27" /><label kind="synchronisation" x="48" y="-384">changeLevel?</label><label kind="assignment" x="48" y="-368">L=newLevel</label><nail x="64" y="-352" /><nail x="128" y="-352" /></transition></template><system>// IUT part:
interface= Interface(epsilon, delta, setGrasp, setRelease);
dimmer = Dimmer(delay, setLevel, iutLevel);
switcher = Switch(setLevel, iutLevel);

// Env part:
// note: SampleUser cannot detect mutant 1, but DumbUser can!
user = GeneralEnv(level, envLevel);
//user = DumbUser(level, envLevel);
//user = SampleUser(level, envLevel);
//user = RealUser(level, envLevel);

// communication latency adapters:
graspAdapter = Adapter(latency, grasp, setGrasp);
releaseAdapter = Adapter(latency, release, setRelease);
levelAdapter = IntAdapter(latency, setLevel, iutLevel, level, envLevel);

system 	interface, switcher, dimmer, user,
	graspAdapter, releaseAdapter, levelAdapter;

/*
input grasp(), release();
output level(envLevel);
*/</system></nta>